#!/usr/bin/env node
/*
 * @CreatedDate: 2018/08/23
 * @Author: Samick.Hsu(boneache@gmail.com)
 */
//
require('module-alias/register');
const http = require('http');
const App = require('@App');
const logger = require('@Utility/logger').getLogger('server');
const Env = require('@Env');
const crypto = require('crypto');
const DB = require('@DB');

function genId() {
  return crypto.createHash('sha1').update(Date.now().toString() + Math.random().toString()).digest('hex');
}
function normalizePort(val) {
  let port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function launch(app, host, port) {
  port = normalizePort(port);
  let server = http.createServer(app.callback());
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    switch (error.code) {
      case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
      case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
      default:
      throw error;
    }
  }
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    logger.log(`Listening on ${addr.address}:${addr.port}`);
  }
}
function main() {
  let app = App.createApp();
  launch(app, Env.HOST, Env.PORT);
  DB.init();
}

main();
